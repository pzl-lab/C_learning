# 12.4.4存储类别和动态内存分配
**存储类别和内存分配的关系**
1. 具有外部链接，内部链接和无链接的静态变量使用；
2. 自动变量使用
3. 供动态内存分配

`静态存储类别` 使用的内存数量在编译时确定，运行时，内存可访问，程序结束后被销毁。
`自动变量` 变量在函数内存在，随着函数的运行，动态变化。
`动态分配的内存`  在调用malloc()函数或相关函数时存在，调用free()函数后释放。

static_store: 30 at 0x58f927fc70
        auto_store：40  at 0x7ff8ee0c78
                *pi 35 at 0x791862b008
        String Literal at 0x58f927c618
         Auto char Array at 0x7ff8ee0c60
          Dynamic String at 0x791862c010
                Quoted String at        0x58f927c627
输出结果如下：
static_store: 30 at 0x58f927fc70
auto_store：40 at 0x7ff8ee0c78
*pi 35 at 0x791862b008
String Literal at 0x58f927c618
Auto char Array at 0x7ff8ee0c60
Dynamic String at 0x791862c010
Quoted String at 0x58f927c627
结果表明：静态数组占用一个区域，自动数据占另一个区域，动态分配的数据占第3个区域（通常被称为内存堆或自由内存）。
```//程序清单12.15  where.c 程序
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int static_store = 30;
const char *pcg= "String Literal";
int main()
{
	int auto_store = 40; //自动变量
	char auto_string []= "Auto char Array";
	int *pi;
	char*pcl;
	pi = (int*)malloc(sizeof(int));
	*pi = 35;
	pcl = (char*)malloc(strlen("Dynamic String")+1);
	strcpy(pcl, "Dynamic String");
	printf("static_store: %d at %p\n", static_store, &static_store);
	printf("	auto_store：%d  at %p\n", auto_store, &auto_store);
	printf("		*pi %d at %p\n", *pi, pi);
	printf("	%s at %p\n", pcg,	pcg);
	printf("	 %s at %p\n", auto_string, auto_string);
	printf("	  %s at %p\n", pcl, pcl);
	printf("		%s at 	%p\n", 	"Quoted String", "Quoted String");
	free(pi);
	free(pcl);
	return 0;
}
```
输出结果如下：
static_store: 30 at 0x58f927fc70
        auto_store：40  at 0x7ff8ee0c78
                *pi 35 at 0x791862b008
        String Literal at 0x58f927c618
         Auto char Array at 0x7ff8ee0c60
          Dynamic String at 0x791862c010
                Quoted String at        0x58f927c627
结果表明：静态数组占用一个区域，**自动数据**占另一个区域，**动态分配**的数据占第3个区域（`通常被称为内存堆或自由内存`）。
# 12.5 ANSI C类型限定符
常用**类型** 和**存储类别**来描述一个变量。C90多了两个属性：恒常性（constancy)和易变形（volatility)。这两个关键词用一下声明：const和volatile来声明，其创建的类型是**限定类型**（qualified type）。
+ const
+ volatile
+ restrict 
+ _Atomic (C11的可选库，stdatomic.h管理，用来支持**并发程序设计**)
	C99多了一个新属性：幂等的。（idempotent)!在一条声明中，多次使用一个限定符，多余的限定符被忽略。
##12.5.1const类型限定符
	const声明使变量称为只读类型。
	普通变量和数组使用const简单。但是指针使用const，需要区分是限定**指针本身**还是**指针指向的值**。eg：
	const float*pf; /*pf指向一个float类型的const值*/
	float*const pt; //pt是一个常量的指针，
	const float*const ptr;//
	**2.对全局数据使用const**
	使用`全局变量`是一种冒险的方法（因为暴露数据，程序任何一部分可改）。利用const关键词可以避免这样的危险。可以使用：
- const变量
- const数组
- const结构
	文件间共享cont数据的常用策略。**1**,遵循变量的常用规则，在一个文件中定义声明，其它文件中引用式声明（用extern关键字）
```
//file1.c --定义外部的变量
	const double pi=3.1415926;
	const char*MONTH[12]={"January", "Feburary", "March", "April", "May", "June", "July", "August", "Septemeber", "October", "November", "December",};
 //file.c -使用定义在别处的const变量
#include "constant.h"
```
  以上方案必须在头文件中用关键字static声明全局const变量。去掉static，在file.c中包含constant.h会使每个文件中有相同的标识符定义，C标准不允许。（**static声明的文件作用域变量具有内部链接属性）。用头文件，代表创建了副本，数据对每个文件单独可用。使用头文件的好处，便捷。
## 12.5.2volatile类型限定符
  volatile限定符告诉计算机，代理(不是变量所在的程序）可以改变该变量的值。
## 12.5.3restrict类型限制符
  restrict关键字允许编译器优化某部分代码以更好的支持计算。它只能用于指针，表面指针是访问数据对象的**唯一且初始**的方式。eg:
```
	int ar[10];
	int *restrict restar = (int*)malloc(10 * sizeof(int));// 指针是访问malloc()分配内存的唯一方法
	int * par = ar; //par不是访问ar的唯一方式，也没有初始化ar。
```
对于更复杂的问题：
```
for (n=0; n<10; n++)
{
	par[n] += 5;
	restar[n] +=5;
	ar[n] *=2;
	par[n] +=3;
	restar[n] +=3;
}
```
## 12.5.4 Atomic类型限定符
  **并发程序**把程序执行分成多个线程。如何访问数据相同的不同线程，是一个挑战。C11提供了可选头文件**stdatomic.h和thread.h**，提供一些可选管理方法。通过各种宏函数来访问原子类型。
```
	int hogs;// normal statement
	hogs = 12;
//替换
	_Atomic int hogs; //hogs是一个原子类型的变量
	atomic_store(&hogs, 12); //stdatomic.h中的宏
```

## 12.5.5旧关键字的新位置
  C99允许把*类型限定符*和*存储类别说明符*static放在函数原型和函数头的形式参数的初始方括号中。
# 12.6关键概念
  C提供多种管理内存的模型。通常情况，最好使用自动变量。通常，使用自动变量，函数形参和返回值进行函数间的通信比使用全局变量更安全。但是，保持不变的数据适合全局变量。
  要理解**静态内存**,**自动内存**,**动态内存**分配的属性。
# 12.7本章小结
  内存用于存储1程序中的数据，由存储期,作用域和链表征。
  C的5种存储类别：

- **自动**：（在块不带存储类别说明符，或带auto存储类别说明符声明的变量（或作为函数头中的形参）属于**自动存储类别**，具有自动存储期，块作用域，无连接。*如果未初始化自动变量，其值是未定义的*。
- **寄存器**：（块中带register存储类别说明符声明的变量（或作为函数头中的形参）属于寄存器类别，具有自动存储期，块作用域，无连接，**且无法获取其地址**。把变量声明为**寄存器变量**即请求编译器将其存储到访问速度最快的区域。*如果未初始化自动变量，其值是未定义的*。
- **静态，无链接**：在块中带有static存储类别说明符声明的变量属于“静态，无连接”存储类别，具有静态存储期，块作用域，无连接。只在**编译时**被初始化一次。如果未显示初始化，其字节被是设置为**0**。
- **静态，外部链接**：在所有函数外部且使用了static存储类别什么符声明的变量属于“静态，外部链接”存储类别，具有静态存储期，文件作用域，外部链接。只在编译器初始化一次，如果未显示初始化，其字节被是设置为**0**。
- **静态，内部链接**：在所以函数外部且使用可static存储类别说明符声明的变量属于“静态，内部链接”存储类别，具有静态存储期，文件作用域，内部链接。只在编译器初始化一次，如果未显示初始化，其字节被是设置为**0**。
- **动态分配**的内存有malloc()函数分配，其返回一个**指向知道的字节数内存块的指针**。被free()函数释放后，可重复使用，free()以该内存块的地址作参数。
  最后，熟悉几个类型限定符：**const，volatile，restrict和_Atomic。**
